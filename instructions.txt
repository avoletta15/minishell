env registry:
	- string array to env var linked list -- done
	- helper functions to manipulate the linked list -- done

expansion:
	- DO NOT RUN ON HEREDOC ARG TOKENS OR PIPES OR REDIRS
	- skip single quoted characters -- done
	- find dolar single -- done
	** count how many valid characters are present in the var key ** 
		- 0 skip dollar and the next characters -- done
	** count == 1 && key[0] == '?'** -- done
		- return exit status itoa'd -- done
	- else -> find key's value using the helper functions -- done
	- replace the dollar + key with the returned value (non existest keys replaced with "") -- done
	- move the iterator cursosr after the replaced value -- done
	** on finish **
		- if the token is completely empty
			skip iterator 
		- else
			run lexer's first pass (replace white spaces with \1)
		split by \1
		transform string array into token  linked list


HERE DOC
>> $PWD
> vv
> ar
> $USR
> $PWD 

exemplo: nesse caso $PWD nao expande, pq foi setado como delmitador do here doc.
como verificar isso? verifica se o previous token eh o here doc



#############################################
expansao de variavel composta (t="cat < Makefile" - tanto faz single ou double qoutes). 
o resultado da expansão vai ser um array em que cada um dos tokens eh um elemento da array
{
	cat
	<
	Makefile
}

o primeiro (cat) é interpretado como o comando em si, e todo o resto, como aergumento
--> cat = comando / < = file / Makefile = file
output de $t ::

cat: <: No such file or directory
test

::
{
	char				*cmd_path = { resultado da busca pelo primeiro elemento do split da expansão, ou seja, cat no nosso exemplo };
	char				**args = { cat, <, Makefile };
	int					fd[2]; // Em aberto
	t_redirect			*redirections = NULL;
	struct s_command	*next = NULL;
}